/*
 * Particle.cpp
 *
 *  Created on: 23.02.2010
 *      Author: eckhardw
 */

#include "Particle.h"
#include "../utils/ArrayUtils.h"

#include <iostream>

Particle::Particle(int type_arg)
{
    type = type_arg;
    f = {0., 0., 0.};
    old_f = {0., 0., 0.};
    _memoryLogger = spdlog::get("memory_logger");
    _memoryLogger->info("Particle generated!");
}

Particle::Particle(const Particle &other)
{
    x = other.x;
    v = other.v;
    f = other.f;
    old_f = other.old_f;
    m = other.m;
    type = other.type;
    _memoryLogger = spdlog::get("memory_logger");
    _memoryLogger->info("Particle generated by copy!");
}

Particle::Particle(std::array<double, 3> x_arg, std::array<double, 3> v_arg,
                   double m_arg, int type_arg) : x(x_arg), v(v_arg), m(m_arg), type(type_arg)
{
    f = {0., 0., 0.};
    old_f = {0., 0., 0.};
    _memoryLogger = spdlog::get("memory_logger");
    _memoryLogger->info("Particle generated!");
}

Particle::~Particle()
{
    _memoryLogger->info("Particle destructed!");
}

const std::array<double, 3> &Particle::getX() const { return x; }
const void Particle::setX(const std::array<double, 3> &new_x) { x = new_x; }

const std::array<double, 3> &Particle::getV() const { return v; }
const void Particle::setV(const std::array<double, 3> &new_v) { v = new_v; }

const std::array<double, 3> &Particle::getF() const { return f; }
const void Particle::setF(const std::array<double, 3> &new_f) { f = new_f; }
const void Particle::addF(const std::array<double, 3> &new_f) { f = f + new_f; }

const std::array<double, 3> &Particle::getOldF() const { return old_f; }
const void Particle::setOldF(const std::array<double, 3> &new_old_f) { old_f = new_old_f; }

double Particle::getM() const { return m; }

int Particle::getType() const { return type; }

std::string Particle::toString() const
{
    std::stringstream stream;
    stream << "Particle: X:" << x << " v: " << v << " f: " << f
           << " old_f: " << old_f << " type: " << type;
    return stream.str();
}

bool Particle::operator==(Particle &other)
{
    return (x == other.x) and (v == other.v) and (f == other.f) and
           (type == other.type) and (m == other.m) and (old_f == other.old_f);
}

std::ostream &operator<<(std::ostream &stream, Particle &p)
{
    stream << p.toString();
    return stream;
}
