// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Simulation.hxx"

// simulation_t
// 

const simulation_t::end_time_type& simulation_t::
end_time () const
{
  return this->end_time_.get ();
}

simulation_t::end_time_type& simulation_t::
end_time ()
{
  return this->end_time_.get ();
}

void simulation_t::
end_time (const end_time_type& x)
{
  this->end_time_.set (x);
}

const simulation_t::delta_t_type& simulation_t::
delta_t () const
{
  return this->delta_t_.get ();
}

simulation_t::delta_t_type& simulation_t::
delta_t ()
{
  return this->delta_t_.get ();
}

void simulation_t::
delta_t (const delta_t_type& x)
{
  this->delta_t_.set (x);
}

const simulation_t::cutoff_type& simulation_t::
cutoff () const
{
  return this->cutoff_.get ();
}

simulation_t::cutoff_type& simulation_t::
cutoff ()
{
  return this->cutoff_.get ();
}

void simulation_t::
cutoff (const cutoff_type& x)
{
  this->cutoff_.set (x);
}

const simulation_t::domain_type& simulation_t::
domain () const
{
  return this->domain_.get ();
}

simulation_t::domain_type& simulation_t::
domain ()
{
  return this->domain_.get ();
}

void simulation_t::
domain (const domain_type& x)
{
  this->domain_.set (x);
}

void simulation_t::
domain (::std::unique_ptr< domain_type > x)
{
  this->domain_.set (std::move (x));
}

const simulation_t::boundaries_type& simulation_t::
boundaries () const
{
  return this->boundaries_.get ();
}

simulation_t::boundaries_type& simulation_t::
boundaries ()
{
  return this->boundaries_.get ();
}

void simulation_t::
boundaries (const boundaries_type& x)
{
  this->boundaries_.set (x);
}

void simulation_t::
boundaries (::std::unique_ptr< boundaries_type > x)
{
  this->boundaries_.set (std::move (x));
}

const simulation_t::g_grav_type& simulation_t::
g_grav () const
{
  return this->g_grav_.get ();
}

simulation_t::g_grav_type& simulation_t::
g_grav ()
{
  return this->g_grav_.get ();
}

void simulation_t::
g_grav (const g_grav_type& x)
{
  this->g_grav_.set (x);
}

void simulation_t::
g_grav (::std::unique_ptr< g_grav_type > x)
{
  this->g_grav_.set (std::move (x));
}

const simulation_t::temp_init_optional& simulation_t::
temp_init () const
{
  return this->temp_init_;
}

simulation_t::temp_init_optional& simulation_t::
temp_init ()
{
  return this->temp_init_;
}

void simulation_t::
temp_init (const temp_init_type& x)
{
  this->temp_init_.set (x);
}

void simulation_t::
temp_init (const temp_init_optional& x)
{
  this->temp_init_ = x;
}

const simulation_t::brownianMotion_optional& simulation_t::
brownianMotion () const
{
  return this->brownianMotion_;
}

simulation_t::brownianMotion_optional& simulation_t::
brownianMotion ()
{
  return this->brownianMotion_;
}

void simulation_t::
brownianMotion (const brownianMotion_type& x)
{
  this->brownianMotion_.set (x);
}

void simulation_t::
brownianMotion (const brownianMotion_optional& x)
{
  this->brownianMotion_ = x;
}

const simulation_t::n_thermostat_type& simulation_t::
n_thermostat () const
{
  return this->n_thermostat_.get ();
}

simulation_t::n_thermostat_type& simulation_t::
n_thermostat ()
{
  return this->n_thermostat_.get ();
}

void simulation_t::
n_thermostat (const n_thermostat_type& x)
{
  this->n_thermostat_.set (x);
}

const simulation_t::temp_target_optional& simulation_t::
temp_target () const
{
  return this->temp_target_;
}

simulation_t::temp_target_optional& simulation_t::
temp_target ()
{
  return this->temp_target_;
}

void simulation_t::
temp_target (const temp_target_type& x)
{
  this->temp_target_.set (x);
}

void simulation_t::
temp_target (const temp_target_optional& x)
{
  this->temp_target_ = x;
}

const simulation_t::delta_temp_optional& simulation_t::
delta_temp () const
{
  return this->delta_temp_;
}

simulation_t::delta_temp_optional& simulation_t::
delta_temp ()
{
  return this->delta_temp_;
}

void simulation_t::
delta_temp (const delta_temp_type& x)
{
  this->delta_temp_.set (x);
}

void simulation_t::
delta_temp (const delta_temp_optional& x)
{
  this->delta_temp_ = x;
}

const simulation_t::membrane_optional& simulation_t::
membrane () const
{
  return this->membrane_;
}

simulation_t::membrane_optional& simulation_t::
membrane ()
{
  return this->membrane_;
}

void simulation_t::
membrane (const membrane_type& x)
{
  this->membrane_.set (x);
}

void simulation_t::
membrane (const membrane_optional& x)
{
  this->membrane_ = x;
}

const simulation_t::stiffness_optional& simulation_t::
stiffness () const
{
  return this->stiffness_;
}

simulation_t::stiffness_optional& simulation_t::
stiffness ()
{
  return this->stiffness_;
}

void simulation_t::
stiffness (const stiffness_type& x)
{
  this->stiffness_.set (x);
}

void simulation_t::
stiffness (const stiffness_optional& x)
{
  this->stiffness_ = x;
}

const simulation_t::average_bond_length_optional& simulation_t::
average_bond_length () const
{
  return this->average_bond_length_;
}

simulation_t::average_bond_length_optional& simulation_t::
average_bond_length ()
{
  return this->average_bond_length_;
}

void simulation_t::
average_bond_length (const average_bond_length_type& x)
{
  this->average_bond_length_.set (x);
}

void simulation_t::
average_bond_length (const average_bond_length_optional& x)
{
  this->average_bond_length_ = x;
}

const simulation_t::dimension_optional& simulation_t::
dimension () const
{
  return this->dimension_;
}

simulation_t::dimension_optional& simulation_t::
dimension ()
{
  return this->dimension_;
}

void simulation_t::
dimension (const dimension_type& x)
{
  this->dimension_.set (x);
}

void simulation_t::
dimension (const dimension_optional& x)
{
  this->dimension_ = x;
}

const simulation_t::writeFrequency_optional& simulation_t::
writeFrequency () const
{
  return this->writeFrequency_;
}

simulation_t::writeFrequency_optional& simulation_t::
writeFrequency ()
{
  return this->writeFrequency_;
}

void simulation_t::
writeFrequency (const writeFrequency_type& x)
{
  this->writeFrequency_.set (x);
}

void simulation_t::
writeFrequency (const writeFrequency_optional& x)
{
  this->writeFrequency_ = x;
}

const simulation_t::baseName_optional& simulation_t::
baseName () const
{
  return this->baseName_;
}

simulation_t::baseName_optional& simulation_t::
baseName ()
{
  return this->baseName_;
}

void simulation_t::
baseName (const baseName_type& x)
{
  this->baseName_.set (x);
}

void simulation_t::
baseName (const baseName_optional& x)
{
  this->baseName_ = x;
}

void simulation_t::
baseName (::std::unique_ptr< baseName_type > x)
{
  this->baseName_.set (std::move (x));
}

const simulation_t::createCheckpoint_optional& simulation_t::
createCheckpoint () const
{
  return this->createCheckpoint_;
}

simulation_t::createCheckpoint_optional& simulation_t::
createCheckpoint ()
{
  return this->createCheckpoint_;
}

void simulation_t::
createCheckpoint (const createCheckpoint_type& x)
{
  this->createCheckpoint_.set (x);
}

void simulation_t::
createCheckpoint (const createCheckpoint_optional& x)
{
  this->createCheckpoint_ = x;
}

const simulation_t::file_name_sequence& simulation_t::
file_name () const
{
  return this->file_name_;
}

simulation_t::file_name_sequence& simulation_t::
file_name ()
{
  return this->file_name_;
}

void simulation_t::
file_name (const file_name_sequence& s)
{
  this->file_name_ = s;
}

const simulation_t::force_sequence& simulation_t::
force () const
{
  return this->force_;
}

simulation_t::force_sequence& simulation_t::
force ()
{
  return this->force_;
}

void simulation_t::
force (const force_sequence& s)
{
  this->force_ = s;
}

const simulation_t::cuboid_sequence& simulation_t::
cuboid () const
{
  return this->cuboid_;
}

simulation_t::cuboid_sequence& simulation_t::
cuboid ()
{
  return this->cuboid_;
}

void simulation_t::
cuboid (const cuboid_sequence& s)
{
  this->cuboid_ = s;
}

const simulation_t::sphere_sequence& simulation_t::
sphere () const
{
  return this->sphere_;
}

simulation_t::sphere_sequence& simulation_t::
sphere ()
{
  return this->sphere_;
}

void simulation_t::
sphere (const sphere_sequence& s)
{
  this->sphere_ = s;
}


// domain
// 

const domain::x_type& domain::
x () const
{
  return this->x_.get ();
}

domain::x_type& domain::
x ()
{
  return this->x_.get ();
}

void domain::
x (const x_type& x)
{
  this->x_.set (x);
}

const domain::y_type& domain::
y () const
{
  return this->y_.get ();
}

domain::y_type& domain::
y ()
{
  return this->y_.get ();
}

void domain::
y (const y_type& x)
{
  this->y_.set (x);
}

const domain::z_type& domain::
z () const
{
  return this->z_.get ();
}

domain::z_type& domain::
z ()
{
  return this->z_.get ();
}

void domain::
z (const z_type& x)
{
  this->z_.set (x);
}


// boundaries
// 

const boundaries::xLeft_type& boundaries::
xLeft () const
{
  return this->xLeft_.get ();
}

boundaries::xLeft_type& boundaries::
xLeft ()
{
  return this->xLeft_.get ();
}

void boundaries::
xLeft (const xLeft_type& x)
{
  this->xLeft_.set (x);
}

void boundaries::
xLeft (::std::unique_ptr< xLeft_type > x)
{
  this->xLeft_.set (std::move (x));
}

const boundaries::xRight_type& boundaries::
xRight () const
{
  return this->xRight_.get ();
}

boundaries::xRight_type& boundaries::
xRight ()
{
  return this->xRight_.get ();
}

void boundaries::
xRight (const xRight_type& x)
{
  this->xRight_.set (x);
}

void boundaries::
xRight (::std::unique_ptr< xRight_type > x)
{
  this->xRight_.set (std::move (x));
}

const boundaries::yBottom_type& boundaries::
yBottom () const
{
  return this->yBottom_.get ();
}

boundaries::yBottom_type& boundaries::
yBottom ()
{
  return this->yBottom_.get ();
}

void boundaries::
yBottom (const yBottom_type& x)
{
  this->yBottom_.set (x);
}

void boundaries::
yBottom (::std::unique_ptr< yBottom_type > x)
{
  this->yBottom_.set (std::move (x));
}

const boundaries::yTop_type& boundaries::
yTop () const
{
  return this->yTop_.get ();
}

boundaries::yTop_type& boundaries::
yTop ()
{
  return this->yTop_.get ();
}

void boundaries::
yTop (const yTop_type& x)
{
  this->yTop_.set (x);
}

void boundaries::
yTop (::std::unique_ptr< yTop_type > x)
{
  this->yTop_.set (std::move (x));
}

const boundaries::zFront_type& boundaries::
zFront () const
{
  return this->zFront_.get ();
}

boundaries::zFront_type& boundaries::
zFront ()
{
  return this->zFront_.get ();
}

void boundaries::
zFront (const zFront_type& x)
{
  this->zFront_.set (x);
}

void boundaries::
zFront (::std::unique_ptr< zFront_type > x)
{
  this->zFront_.set (std::move (x));
}

const boundaries::zBack_type& boundaries::
zBack () const
{
  return this->zBack_.get ();
}

boundaries::zBack_type& boundaries::
zBack ()
{
  return this->zBack_.get ();
}

void boundaries::
zBack (const zBack_type& x)
{
  this->zBack_.set (x);
}

void boundaries::
zBack (::std::unique_ptr< zBack_type > x)
{
  this->zBack_.set (std::move (x));
}


// g_grav
// 

const g_grav::x_type& g_grav::
x () const
{
  return this->x_.get ();
}

g_grav::x_type& g_grav::
x ()
{
  return this->x_.get ();
}

void g_grav::
x (const x_type& x)
{
  this->x_.set (x);
}

const g_grav::y_type& g_grav::
y () const
{
  return this->y_.get ();
}

g_grav::y_type& g_grav::
y ()
{
  return this->y_.get ();
}

void g_grav::
y (const y_type& x)
{
  this->y_.set (x);
}

const g_grav::z_type& g_grav::
z () const
{
  return this->z_.get ();
}

g_grav::z_type& g_grav::
z ()
{
  return this->z_.get ();
}

void g_grav::
z (const z_type& x)
{
  this->z_.set (x);
}


// force
// 

const force::end_time_type& force::
end_time () const
{
  return this->end_time_.get ();
}

force::end_time_type& force::
end_time ()
{
  return this->end_time_.get ();
}

void force::
end_time (const end_time_type& x)
{
  this->end_time_.set (x);
}

const force::force1_type& force::
force1 () const
{
  return this->force1_.get ();
}

force::force1_type& force::
force1 ()
{
  return this->force1_.get ();
}

void force::
force1 (const force1_type& x)
{
  this->force1_.set (x);
}

void force::
force1 (::std::unique_ptr< force1_type > x)
{
  this->force1_.set (std::move (x));
}

const force::particles_sequence& force::
particles () const
{
  return this->particles_;
}

force::particles_sequence& force::
particles ()
{
  return this->particles_;
}

void force::
particles (const particles_sequence& s)
{
  this->particles_ = s;
}


// cuboid
// 

const cuboid::mass_type& cuboid::
mass () const
{
  return this->mass_.get ();
}

cuboid::mass_type& cuboid::
mass ()
{
  return this->mass_.get ();
}

void cuboid::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const cuboid::h_type& cuboid::
h () const
{
  return this->h_.get ();
}

cuboid::h_type& cuboid::
h ()
{
  return this->h_.get ();
}

void cuboid::
h (const h_type& x)
{
  this->h_.set (x);
}

const cuboid::epsilon_type& cuboid::
epsilon () const
{
  return this->epsilon_.get ();
}

cuboid::epsilon_type& cuboid::
epsilon ()
{
  return this->epsilon_.get ();
}

void cuboid::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

const cuboid::sigma_type& cuboid::
sigma () const
{
  return this->sigma_.get ();
}

cuboid::sigma_type& cuboid::
sigma ()
{
  return this->sigma_.get ();
}

void cuboid::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

const cuboid::type_type& cuboid::
type () const
{
  return this->type_.get ();
}

cuboid::type_type& cuboid::
type ()
{
  return this->type_.get ();
}

void cuboid::
type (const type_type& x)
{
  this->type_.set (x);
}

const cuboid::position_type& cuboid::
position () const
{
  return this->position_.get ();
}

cuboid::position_type& cuboid::
position ()
{
  return this->position_.get ();
}

void cuboid::
position (const position_type& x)
{
  this->position_.set (x);
}

void cuboid::
position (::std::unique_ptr< position_type > x)
{
  this->position_.set (std::move (x));
}

const cuboid::velocity_type& cuboid::
velocity () const
{
  return this->velocity_.get ();
}

cuboid::velocity_type& cuboid::
velocity ()
{
  return this->velocity_.get ();
}

void cuboid::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void cuboid::
velocity (::std::unique_ptr< velocity_type > x)
{
  this->velocity_.set (std::move (x));
}

const cuboid::dimensions_type& cuboid::
dimensions () const
{
  return this->dimensions_.get ();
}

cuboid::dimensions_type& cuboid::
dimensions ()
{
  return this->dimensions_.get ();
}

void cuboid::
dimensions (const dimensions_type& x)
{
  this->dimensions_.set (x);
}

void cuboid::
dimensions (::std::unique_ptr< dimensions_type > x)
{
  this->dimensions_.set (std::move (x));
}


// sphere
// 

const sphere::mass_type& sphere::
mass () const
{
  return this->mass_.get ();
}

sphere::mass_type& sphere::
mass ()
{
  return this->mass_.get ();
}

void sphere::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const sphere::h_type& sphere::
h () const
{
  return this->h_.get ();
}

sphere::h_type& sphere::
h ()
{
  return this->h_.get ();
}

void sphere::
h (const h_type& x)
{
  this->h_.set (x);
}

const sphere::r_type& sphere::
r () const
{
  return this->r_.get ();
}

sphere::r_type& sphere::
r ()
{
  return this->r_.get ();
}

void sphere::
r (const r_type& x)
{
  this->r_.set (x);
}

const sphere::epsilon_type& sphere::
epsilon () const
{
  return this->epsilon_.get ();
}

sphere::epsilon_type& sphere::
epsilon ()
{
  return this->epsilon_.get ();
}

void sphere::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

const sphere::sigma_type& sphere::
sigma () const
{
  return this->sigma_.get ();
}

sphere::sigma_type& sphere::
sigma ()
{
  return this->sigma_.get ();
}

void sphere::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

const sphere::type_type& sphere::
type () const
{
  return this->type_.get ();
}

sphere::type_type& sphere::
type ()
{
  return this->type_.get ();
}

void sphere::
type (const type_type& x)
{
  this->type_.set (x);
}

const sphere::center_type& sphere::
center () const
{
  return this->center_.get ();
}

sphere::center_type& sphere::
center ()
{
  return this->center_.get ();
}

void sphere::
center (const center_type& x)
{
  this->center_.set (x);
}

void sphere::
center (::std::unique_ptr< center_type > x)
{
  this->center_.set (std::move (x));
}

const sphere::velocity_type& sphere::
velocity () const
{
  return this->velocity_.get ();
}

sphere::velocity_type& sphere::
velocity ()
{
  return this->velocity_.get ();
}

void sphere::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void sphere::
velocity (::std::unique_ptr< velocity_type > x)
{
  this->velocity_.set (std::move (x));
}


// force1
// 

const force1::x_type& force1::
x () const
{
  return this->x_.get ();
}

force1::x_type& force1::
x ()
{
  return this->x_.get ();
}

void force1::
x (const x_type& x)
{
  this->x_.set (x);
}

const force1::y_type& force1::
y () const
{
  return this->y_.get ();
}

force1::y_type& force1::
y ()
{
  return this->y_.get ();
}

void force1::
y (const y_type& x)
{
  this->y_.set (x);
}

const force1::z_type& force1::
z () const
{
  return this->z_.get ();
}

force1::z_type& force1::
z ()
{
  return this->z_.get ();
}

void force1::
z (const z_type& x)
{
  this->z_.set (x);
}


// particles
// 

const particles::particle_index_type& particles::
particle_index () const
{
  return this->particle_index_.get ();
}

particles::particle_index_type& particles::
particle_index ()
{
  return this->particle_index_.get ();
}

void particles::
particle_index (const particle_index_type& x)
{
  this->particle_index_.set (x);
}

void particles::
particle_index (::std::unique_ptr< particle_index_type > x)
{
  this->particle_index_.set (std::move (x));
}

const particles::dimensions_type& particles::
dimensions () const
{
  return this->dimensions_.get ();
}

particles::dimensions_type& particles::
dimensions ()
{
  return this->dimensions_.get ();
}

void particles::
dimensions (const dimensions_type& x)
{
  this->dimensions_.set (x);
}

void particles::
dimensions (::std::unique_ptr< dimensions_type > x)
{
  this->dimensions_.set (std::move (x));
}


// position
// 

const position::x_type& position::
x () const
{
  return this->x_.get ();
}

position::x_type& position::
x ()
{
  return this->x_.get ();
}

void position::
x (const x_type& x)
{
  this->x_.set (x);
}

const position::y_type& position::
y () const
{
  return this->y_.get ();
}

position::y_type& position::
y ()
{
  return this->y_.get ();
}

void position::
y (const y_type& x)
{
  this->y_.set (x);
}

const position::z_type& position::
z () const
{
  return this->z_.get ();
}

position::z_type& position::
z ()
{
  return this->z_.get ();
}

void position::
z (const z_type& x)
{
  this->z_.set (x);
}


// velocity
// 

const velocity::x_type& velocity::
x () const
{
  return this->x_.get ();
}

velocity::x_type& velocity::
x ()
{
  return this->x_.get ();
}

void velocity::
x (const x_type& x)
{
  this->x_.set (x);
}

const velocity::y_type& velocity::
y () const
{
  return this->y_.get ();
}

velocity::y_type& velocity::
y ()
{
  return this->y_.get ();
}

void velocity::
y (const y_type& x)
{
  this->y_.set (x);
}

const velocity::z_type& velocity::
z () const
{
  return this->z_.get ();
}

velocity::z_type& velocity::
z ()
{
  return this->z_.get ();
}

void velocity::
z (const z_type& x)
{
  this->z_.set (x);
}


// dimensions
// 

const dimensions::x_type& dimensions::
x () const
{
  return this->x_.get ();
}

dimensions::x_type& dimensions::
x ()
{
  return this->x_.get ();
}

void dimensions::
x (const x_type& x)
{
  this->x_.set (x);
}

const dimensions::y_type& dimensions::
y () const
{
  return this->y_.get ();
}

dimensions::y_type& dimensions::
y ()
{
  return this->y_.get ();
}

void dimensions::
y (const y_type& x)
{
  this->y_.set (x);
}

const dimensions::z_type& dimensions::
z () const
{
  return this->z_.get ();
}

dimensions::z_type& dimensions::
z ()
{
  return this->z_.get ();
}

void dimensions::
z (const z_type& x)
{
  this->z_.set (x);
}


// center
// 

const center::x_type& center::
x () const
{
  return this->x_.get ();
}

center::x_type& center::
x ()
{
  return this->x_.get ();
}

void center::
x (const x_type& x)
{
  this->x_.set (x);
}

const center::y_type& center::
y () const
{
  return this->y_.get ();
}

center::y_type& center::
y ()
{
  return this->y_.get ();
}

void center::
y (const y_type& x)
{
  this->y_.set (x);
}

const center::z_type& center::
z () const
{
  return this->z_.get ();
}

center::z_type& center::
z ()
{
  return this->z_.get ();
}

void center::
z (const z_type& x)
{
  this->z_.set (x);
}


// particle_index
// 

const particle_index::x_type& particle_index::
x () const
{
  return this->x_.get ();
}

particle_index::x_type& particle_index::
x ()
{
  return this->x_.get ();
}

void particle_index::
x (const x_type& x)
{
  this->x_.set (x);
}

const particle_index::y_type& particle_index::
y () const
{
  return this->y_.get ();
}

particle_index::y_type& particle_index::
y ()
{
  return this->y_.get ();
}

void particle_index::
y (const y_type& x)
{
  this->y_.set (x);
}

const particle_index::z_type& particle_index::
z () const
{
  return this->z_.get ();
}

particle_index::z_type& particle_index::
z ()
{
  return this->z_.get ();
}

void particle_index::
z (const z_type& x)
{
  this->z_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// simulation_t
//

simulation_t::
simulation_t (const end_time_type& end_time,
              const delta_t_type& delta_t,
              const cutoff_type& cutoff,
              const domain_type& domain,
              const boundaries_type& boundaries,
              const g_grav_type& g_grav,
              const n_thermostat_type& n_thermostat)
: ::xml_schema::type (),
  end_time_ (end_time, this),
  delta_t_ (delta_t, this),
  cutoff_ (cutoff, this),
  domain_ (domain, this),
  boundaries_ (boundaries, this),
  g_grav_ (g_grav, this),
  temp_init_ (this),
  brownianMotion_ (this),
  n_thermostat_ (n_thermostat, this),
  temp_target_ (this),
  delta_temp_ (this),
  membrane_ (this),
  stiffness_ (this),
  average_bond_length_ (this),
  dimension_ (this),
  writeFrequency_ (this),
  baseName_ (this),
  createCheckpoint_ (this),
  file_name_ (this),
  force_ (this),
  cuboid_ (this),
  sphere_ (this)
{
}

simulation_t::
simulation_t (const end_time_type& end_time,
              const delta_t_type& delta_t,
              const cutoff_type& cutoff,
              ::std::unique_ptr< domain_type > domain,
              ::std::unique_ptr< boundaries_type > boundaries,
              ::std::unique_ptr< g_grav_type > g_grav,
              const n_thermostat_type& n_thermostat)
: ::xml_schema::type (),
  end_time_ (end_time, this),
  delta_t_ (delta_t, this),
  cutoff_ (cutoff, this),
  domain_ (std::move (domain), this),
  boundaries_ (std::move (boundaries), this),
  g_grav_ (std::move (g_grav), this),
  temp_init_ (this),
  brownianMotion_ (this),
  n_thermostat_ (n_thermostat, this),
  temp_target_ (this),
  delta_temp_ (this),
  membrane_ (this),
  stiffness_ (this),
  average_bond_length_ (this),
  dimension_ (this),
  writeFrequency_ (this),
  baseName_ (this),
  createCheckpoint_ (this),
  file_name_ (this),
  force_ (this),
  cuboid_ (this),
  sphere_ (this)
{
}

simulation_t::
simulation_t (const simulation_t& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  end_time_ (x.end_time_, f, this),
  delta_t_ (x.delta_t_, f, this),
  cutoff_ (x.cutoff_, f, this),
  domain_ (x.domain_, f, this),
  boundaries_ (x.boundaries_, f, this),
  g_grav_ (x.g_grav_, f, this),
  temp_init_ (x.temp_init_, f, this),
  brownianMotion_ (x.brownianMotion_, f, this),
  n_thermostat_ (x.n_thermostat_, f, this),
  temp_target_ (x.temp_target_, f, this),
  delta_temp_ (x.delta_temp_, f, this),
  membrane_ (x.membrane_, f, this),
  stiffness_ (x.stiffness_, f, this),
  average_bond_length_ (x.average_bond_length_, f, this),
  dimension_ (x.dimension_, f, this),
  writeFrequency_ (x.writeFrequency_, f, this),
  baseName_ (x.baseName_, f, this),
  createCheckpoint_ (x.createCheckpoint_, f, this),
  file_name_ (x.file_name_, f, this),
  force_ (x.force_, f, this),
  cuboid_ (x.cuboid_, f, this),
  sphere_ (x.sphere_, f, this)
{
}

simulation_t::
simulation_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  end_time_ (this),
  delta_t_ (this),
  cutoff_ (this),
  domain_ (this),
  boundaries_ (this),
  g_grav_ (this),
  temp_init_ (this),
  brownianMotion_ (this),
  n_thermostat_ (this),
  temp_target_ (this),
  delta_temp_ (this),
  membrane_ (this),
  stiffness_ (this),
  average_bond_length_ (this),
  dimension_ (this),
  writeFrequency_ (this),
  baseName_ (this),
  createCheckpoint_ (this),
  file_name_ (this),
  force_ (this),
  cuboid_ (this),
  sphere_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void simulation_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // end_time
    //
    if (n.name () == "end_time" && n.namespace_ ().empty ())
    {
      if (!end_time_.present ())
      {
        this->end_time_.set (end_time_traits::create (i, f, this));
        continue;
      }
    }

    // delta_t
    //
    if (n.name () == "delta_t" && n.namespace_ ().empty ())
    {
      if (!delta_t_.present ())
      {
        this->delta_t_.set (delta_t_traits::create (i, f, this));
        continue;
      }
    }

    // cutoff
    //
    if (n.name () == "cutoff" && n.namespace_ ().empty ())
    {
      if (!cutoff_.present ())
      {
        this->cutoff_.set (cutoff_traits::create (i, f, this));
        continue;
      }
    }

    // domain
    //
    if (n.name () == "domain" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< domain_type > r (
        domain_traits::create (i, f, this));

      if (!domain_.present ())
      {
        this->domain_.set (::std::move (r));
        continue;
      }
    }

    // boundaries
    //
    if (n.name () == "boundaries" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< boundaries_type > r (
        boundaries_traits::create (i, f, this));

      if (!boundaries_.present ())
      {
        this->boundaries_.set (::std::move (r));
        continue;
      }
    }

    // g_grav
    //
    if (n.name () == "g_grav" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< g_grav_type > r (
        g_grav_traits::create (i, f, this));

      if (!g_grav_.present ())
      {
        this->g_grav_.set (::std::move (r));
        continue;
      }
    }

    // temp_init
    //
    if (n.name () == "temp_init" && n.namespace_ ().empty ())
    {
      if (!this->temp_init_)
      {
        this->temp_init_.set (temp_init_traits::create (i, f, this));
        continue;
      }
    }

    // brownianMotion
    //
    if (n.name () == "brownianMotion" && n.namespace_ ().empty ())
    {
      if (!this->brownianMotion_)
      {
        this->brownianMotion_.set (brownianMotion_traits::create (i, f, this));
        continue;
      }
    }

    // n_thermostat
    //
    if (n.name () == "n_thermostat" && n.namespace_ ().empty ())
    {
      if (!n_thermostat_.present ())
      {
        this->n_thermostat_.set (n_thermostat_traits::create (i, f, this));
        continue;
      }
    }

    // temp_target
    //
    if (n.name () == "temp_target" && n.namespace_ ().empty ())
    {
      if (!this->temp_target_)
      {
        this->temp_target_.set (temp_target_traits::create (i, f, this));
        continue;
      }
    }

    // delta_temp
    //
    if (n.name () == "delta_temp" && n.namespace_ ().empty ())
    {
      if (!this->delta_temp_)
      {
        this->delta_temp_.set (delta_temp_traits::create (i, f, this));
        continue;
      }
    }

    // membrane
    //
    if (n.name () == "membrane" && n.namespace_ ().empty ())
    {
      if (!this->membrane_)
      {
        this->membrane_.set (membrane_traits::create (i, f, this));
        continue;
      }
    }

    // stiffness
    //
    if (n.name () == "stiffness" && n.namespace_ ().empty ())
    {
      if (!this->stiffness_)
      {
        this->stiffness_.set (stiffness_traits::create (i, f, this));
        continue;
      }
    }

    // average_bond_length
    //
    if (n.name () == "average_bond_length" && n.namespace_ ().empty ())
    {
      if (!this->average_bond_length_)
      {
        this->average_bond_length_.set (average_bond_length_traits::create (i, f, this));
        continue;
      }
    }

    // dimension
    //
    if (n.name () == "dimension" && n.namespace_ ().empty ())
    {
      if (!this->dimension_)
      {
        this->dimension_.set (dimension_traits::create (i, f, this));
        continue;
      }
    }

    // writeFrequency
    //
    if (n.name () == "writeFrequency" && n.namespace_ ().empty ())
    {
      if (!this->writeFrequency_)
      {
        this->writeFrequency_.set (writeFrequency_traits::create (i, f, this));
        continue;
      }
    }

    // baseName
    //
    if (n.name () == "baseName" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< baseName_type > r (
        baseName_traits::create (i, f, this));

      if (!this->baseName_)
      {
        this->baseName_.set (::std::move (r));
        continue;
      }
    }

    // createCheckpoint
    //
    if (n.name () == "createCheckpoint" && n.namespace_ ().empty ())
    {
      if (!this->createCheckpoint_)
      {
        this->createCheckpoint_.set (createCheckpoint_traits::create (i, f, this));
        continue;
      }
    }

    // file_name
    //
    if (n.name () == "file_name" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< file_name_type > r (
        file_name_traits::create (i, f, this));

      this->file_name_.push_back (::std::move (r));
      continue;
    }

    // force
    //
    if (n.name () == "force" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< force_type > r (
        force_traits::create (i, f, this));

      this->force_.push_back (::std::move (r));
      continue;
    }

    // cuboid
    //
    if (n.name () == "cuboid" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< cuboid_type > r (
        cuboid_traits::create (i, f, this));

      this->cuboid_.push_back (::std::move (r));
      continue;
    }

    // sphere
    //
    if (n.name () == "sphere" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< sphere_type > r (
        sphere_traits::create (i, f, this));

      this->sphere_.push_back (::std::move (r));
      continue;
    }

    break;
  }

  if (!end_time_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "end_time",
      "");
  }

  if (!delta_t_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "delta_t",
      "");
  }

  if (!cutoff_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "cutoff",
      "");
  }

  if (!domain_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "domain",
      "");
  }

  if (!boundaries_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "boundaries",
      "");
  }

  if (!g_grav_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "g_grav",
      "");
  }

  if (!n_thermostat_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "n_thermostat",
      "");
  }
}

simulation_t* simulation_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class simulation_t (*this, f, c);
}

simulation_t& simulation_t::
operator= (const simulation_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->end_time_ = x.end_time_;
    this->delta_t_ = x.delta_t_;
    this->cutoff_ = x.cutoff_;
    this->domain_ = x.domain_;
    this->boundaries_ = x.boundaries_;
    this->g_grav_ = x.g_grav_;
    this->temp_init_ = x.temp_init_;
    this->brownianMotion_ = x.brownianMotion_;
    this->n_thermostat_ = x.n_thermostat_;
    this->temp_target_ = x.temp_target_;
    this->delta_temp_ = x.delta_temp_;
    this->membrane_ = x.membrane_;
    this->stiffness_ = x.stiffness_;
    this->average_bond_length_ = x.average_bond_length_;
    this->dimension_ = x.dimension_;
    this->writeFrequency_ = x.writeFrequency_;
    this->baseName_ = x.baseName_;
    this->createCheckpoint_ = x.createCheckpoint_;
    this->file_name_ = x.file_name_;
    this->force_ = x.force_;
    this->cuboid_ = x.cuboid_;
    this->sphere_ = x.sphere_;
  }

  return *this;
}

simulation_t::
~simulation_t ()
{
}

// domain
//

domain::
domain (const x_type& x,
        const y_type& y,
        const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

domain::
domain (const domain& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

domain::
domain (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void domain::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

domain* domain::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class domain (*this, f, c);
}

domain& domain::
operator= (const domain& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

domain::
~domain ()
{
}

// boundaries
//

boundaries::
boundaries (const xLeft_type& xLeft,
            const xRight_type& xRight,
            const yBottom_type& yBottom,
            const yTop_type& yTop,
            const zFront_type& zFront,
            const zBack_type& zBack)
: ::xml_schema::type (),
  xLeft_ (xLeft, this),
  xRight_ (xRight, this),
  yBottom_ (yBottom, this),
  yTop_ (yTop, this),
  zFront_ (zFront, this),
  zBack_ (zBack, this)
{
}

boundaries::
boundaries (const boundaries& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  xLeft_ (x.xLeft_, f, this),
  xRight_ (x.xRight_, f, this),
  yBottom_ (x.yBottom_, f, this),
  yTop_ (x.yTop_, f, this),
  zFront_ (x.zFront_, f, this),
  zBack_ (x.zBack_, f, this)
{
}

boundaries::
boundaries (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  xLeft_ (this),
  xRight_ (this),
  yBottom_ (this),
  yTop_ (this),
  zFront_ (this),
  zBack_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void boundaries::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // xLeft
    //
    if (n.name () == "xLeft" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< xLeft_type > r (
        xLeft_traits::create (i, f, this));

      if (!xLeft_.present ())
      {
        this->xLeft_.set (::std::move (r));
        continue;
      }
    }

    // xRight
    //
    if (n.name () == "xRight" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< xRight_type > r (
        xRight_traits::create (i, f, this));

      if (!xRight_.present ())
      {
        this->xRight_.set (::std::move (r));
        continue;
      }
    }

    // yBottom
    //
    if (n.name () == "yBottom" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< yBottom_type > r (
        yBottom_traits::create (i, f, this));

      if (!yBottom_.present ())
      {
        this->yBottom_.set (::std::move (r));
        continue;
      }
    }

    // yTop
    //
    if (n.name () == "yTop" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< yTop_type > r (
        yTop_traits::create (i, f, this));

      if (!yTop_.present ())
      {
        this->yTop_.set (::std::move (r));
        continue;
      }
    }

    // zFront
    //
    if (n.name () == "zFront" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< zFront_type > r (
        zFront_traits::create (i, f, this));

      if (!zFront_.present ())
      {
        this->zFront_.set (::std::move (r));
        continue;
      }
    }

    // zBack
    //
    if (n.name () == "zBack" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< zBack_type > r (
        zBack_traits::create (i, f, this));

      if (!zBack_.present ())
      {
        this->zBack_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!xLeft_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "xLeft",
      "");
  }

  if (!xRight_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "xRight",
      "");
  }

  if (!yBottom_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "yBottom",
      "");
  }

  if (!yTop_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "yTop",
      "");
  }

  if (!zFront_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "zFront",
      "");
  }

  if (!zBack_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "zBack",
      "");
  }
}

boundaries* boundaries::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class boundaries (*this, f, c);
}

boundaries& boundaries::
operator= (const boundaries& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->xLeft_ = x.xLeft_;
    this->xRight_ = x.xRight_;
    this->yBottom_ = x.yBottom_;
    this->yTop_ = x.yTop_;
    this->zFront_ = x.zFront_;
    this->zBack_ = x.zBack_;
  }

  return *this;
}

boundaries::
~boundaries ()
{
}

// g_grav
//

g_grav::
g_grav (const x_type& x,
        const y_type& y,
        const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

g_grav::
g_grav (const g_grav& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

g_grav::
g_grav (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void g_grav::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

g_grav* g_grav::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class g_grav (*this, f, c);
}

g_grav& g_grav::
operator= (const g_grav& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

g_grav::
~g_grav ()
{
}

// force
//

force::
force (const end_time_type& end_time,
       const force1_type& force1)
: ::xml_schema::type (),
  end_time_ (end_time, this),
  force1_ (force1, this),
  particles_ (this)
{
}

force::
force (const end_time_type& end_time,
       ::std::unique_ptr< force1_type > force1)
: ::xml_schema::type (),
  end_time_ (end_time, this),
  force1_ (std::move (force1), this),
  particles_ (this)
{
}

force::
force (const force& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  end_time_ (x.end_time_, f, this),
  force1_ (x.force1_, f, this),
  particles_ (x.particles_, f, this)
{
}

force::
force (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  end_time_ (this),
  force1_ (this),
  particles_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void force::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // end_time
    //
    if (n.name () == "end_time" && n.namespace_ ().empty ())
    {
      if (!end_time_.present ())
      {
        this->end_time_.set (end_time_traits::create (i, f, this));
        continue;
      }
    }

    // force
    //
    if (n.name () == "force" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< force1_type > r (
        force1_traits::create (i, f, this));

      if (!force1_.present ())
      {
        this->force1_.set (::std::move (r));
        continue;
      }
    }

    // particles
    //
    if (n.name () == "particles" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< particles_type > r (
        particles_traits::create (i, f, this));

      this->particles_.push_back (::std::move (r));
      continue;
    }

    break;
  }

  if (!end_time_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "end_time",
      "");
  }

  if (!force1_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "force",
      "");
  }
}

force* force::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class force (*this, f, c);
}

force& force::
operator= (const force& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->end_time_ = x.end_time_;
    this->force1_ = x.force1_;
    this->particles_ = x.particles_;
  }

  return *this;
}

force::
~force ()
{
}

// cuboid
//

cuboid::
cuboid (const mass_type& mass,
        const h_type& h,
        const epsilon_type& epsilon,
        const sigma_type& sigma,
        const type_type& type,
        const position_type& position,
        const velocity_type& velocity,
        const dimensions_type& dimensions)
: ::xml_schema::type (),
  mass_ (mass, this),
  h_ (h, this),
  epsilon_ (epsilon, this),
  sigma_ (sigma, this),
  type_ (type, this),
  position_ (position, this),
  velocity_ (velocity, this),
  dimensions_ (dimensions, this)
{
}

cuboid::
cuboid (const mass_type& mass,
        const h_type& h,
        const epsilon_type& epsilon,
        const sigma_type& sigma,
        const type_type& type,
        ::std::unique_ptr< position_type > position,
        ::std::unique_ptr< velocity_type > velocity,
        ::std::unique_ptr< dimensions_type > dimensions)
: ::xml_schema::type (),
  mass_ (mass, this),
  h_ (h, this),
  epsilon_ (epsilon, this),
  sigma_ (sigma, this),
  type_ (type, this),
  position_ (std::move (position), this),
  velocity_ (std::move (velocity), this),
  dimensions_ (std::move (dimensions), this)
{
}

cuboid::
cuboid (const cuboid& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  mass_ (x.mass_, f, this),
  h_ (x.h_, f, this),
  epsilon_ (x.epsilon_, f, this),
  sigma_ (x.sigma_, f, this),
  type_ (x.type_, f, this),
  position_ (x.position_, f, this),
  velocity_ (x.velocity_, f, this),
  dimensions_ (x.dimensions_, f, this)
{
}

cuboid::
cuboid (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  mass_ (this),
  h_ (this),
  epsilon_ (this),
  sigma_ (this),
  type_ (this),
  position_ (this),
  velocity_ (this),
  dimensions_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void cuboid::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    // h
    //
    if (n.name () == "h" && n.namespace_ ().empty ())
    {
      if (!h_.present ())
      {
        this->h_.set (h_traits::create (i, f, this));
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!epsilon_.present ())
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!sigma_.present ())
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      if (!type_.present ())
      {
        this->type_.set (type_traits::create (i, f, this));
        continue;
      }
    }

    // position
    //
    if (n.name () == "position" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< position_type > r (
        position_traits::create (i, f, this));

      if (!position_.present ())
      {
        this->position_.set (::std::move (r));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (::std::move (r));
        continue;
      }
    }

    // dimensions
    //
    if (n.name () == "dimensions" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< dimensions_type > r (
        dimensions_traits::create (i, f, this));

      if (!dimensions_.present ())
      {
        this->dimensions_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!h_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "h",
      "");
  }

  if (!epsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "epsilon",
      "");
  }

  if (!sigma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "sigma",
      "");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }

  if (!position_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "position",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  if (!dimensions_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dimensions",
      "");
  }
}

cuboid* cuboid::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class cuboid (*this, f, c);
}

cuboid& cuboid::
operator= (const cuboid& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->mass_ = x.mass_;
    this->h_ = x.h_;
    this->epsilon_ = x.epsilon_;
    this->sigma_ = x.sigma_;
    this->type_ = x.type_;
    this->position_ = x.position_;
    this->velocity_ = x.velocity_;
    this->dimensions_ = x.dimensions_;
  }

  return *this;
}

cuboid::
~cuboid ()
{
}

// sphere
//

sphere::
sphere (const mass_type& mass,
        const h_type& h,
        const r_type& r,
        const epsilon_type& epsilon,
        const sigma_type& sigma,
        const type_type& type,
        const center_type& center,
        const velocity_type& velocity)
: ::xml_schema::type (),
  mass_ (mass, this),
  h_ (h, this),
  r_ (r, this),
  epsilon_ (epsilon, this),
  sigma_ (sigma, this),
  type_ (type, this),
  center_ (center, this),
  velocity_ (velocity, this)
{
}

sphere::
sphere (const mass_type& mass,
        const h_type& h,
        const r_type& r,
        const epsilon_type& epsilon,
        const sigma_type& sigma,
        const type_type& type,
        ::std::unique_ptr< center_type > center,
        ::std::unique_ptr< velocity_type > velocity)
: ::xml_schema::type (),
  mass_ (mass, this),
  h_ (h, this),
  r_ (r, this),
  epsilon_ (epsilon, this),
  sigma_ (sigma, this),
  type_ (type, this),
  center_ (std::move (center), this),
  velocity_ (std::move (velocity), this)
{
}

sphere::
sphere (const sphere& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  mass_ (x.mass_, f, this),
  h_ (x.h_, f, this),
  r_ (x.r_, f, this),
  epsilon_ (x.epsilon_, f, this),
  sigma_ (x.sigma_, f, this),
  type_ (x.type_, f, this),
  center_ (x.center_, f, this),
  velocity_ (x.velocity_, f, this)
{
}

sphere::
sphere (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  mass_ (this),
  h_ (this),
  r_ (this),
  epsilon_ (this),
  sigma_ (this),
  type_ (this),
  center_ (this),
  velocity_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void sphere::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    // h
    //
    if (n.name () == "h" && n.namespace_ ().empty ())
    {
      if (!h_.present ())
      {
        this->h_.set (h_traits::create (i, f, this));
        continue;
      }
    }

    // r
    //
    if (n.name () == "r" && n.namespace_ ().empty ())
    {
      if (!r_.present ())
      {
        this->r_.set (r_traits::create (i, f, this));
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!epsilon_.present ())
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!sigma_.present ())
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      if (!type_.present ())
      {
        this->type_.set (type_traits::create (i, f, this));
        continue;
      }
    }

    // center
    //
    if (n.name () == "center" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< center_type > r (
        center_traits::create (i, f, this));

      if (!center_.present ())
      {
        this->center_.set (::std::move (r));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!h_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "h",
      "");
  }

  if (!r_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "r",
      "");
  }

  if (!epsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "epsilon",
      "");
  }

  if (!sigma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "sigma",
      "");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }

  if (!center_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "center",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }
}

sphere* sphere::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class sphere (*this, f, c);
}

sphere& sphere::
operator= (const sphere& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->mass_ = x.mass_;
    this->h_ = x.h_;
    this->r_ = x.r_;
    this->epsilon_ = x.epsilon_;
    this->sigma_ = x.sigma_;
    this->type_ = x.type_;
    this->center_ = x.center_;
    this->velocity_ = x.velocity_;
  }

  return *this;
}

sphere::
~sphere ()
{
}

// force1
//

force1::
force1 (const x_type& x,
        const y_type& y,
        const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

force1::
force1 (const force1& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

force1::
force1 (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void force1::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

force1* force1::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class force1 (*this, f, c);
}

force1& force1::
operator= (const force1& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

force1::
~force1 ()
{
}

// particles
//

particles::
particles (const particle_index_type& particle_index,
           const dimensions_type& dimensions)
: ::xml_schema::type (),
  particle_index_ (particle_index, this),
  dimensions_ (dimensions, this)
{
}

particles::
particles (::std::unique_ptr< particle_index_type > particle_index,
           ::std::unique_ptr< dimensions_type > dimensions)
: ::xml_schema::type (),
  particle_index_ (std::move (particle_index), this),
  dimensions_ (std::move (dimensions), this)
{
}

particles::
particles (const particles& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  particle_index_ (x.particle_index_, f, this),
  dimensions_ (x.dimensions_, f, this)
{
}

particles::
particles (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  particle_index_ (this),
  dimensions_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void particles::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // particle_index
    //
    if (n.name () == "particle_index" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< particle_index_type > r (
        particle_index_traits::create (i, f, this));

      if (!particle_index_.present ())
      {
        this->particle_index_.set (::std::move (r));
        continue;
      }
    }

    // dimensions
    //
    if (n.name () == "dimensions" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< dimensions_type > r (
        dimensions_traits::create (i, f, this));

      if (!dimensions_.present ())
      {
        this->dimensions_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!particle_index_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "particle_index",
      "");
  }

  if (!dimensions_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dimensions",
      "");
  }
}

particles* particles::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class particles (*this, f, c);
}

particles& particles::
operator= (const particles& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->particle_index_ = x.particle_index_;
    this->dimensions_ = x.dimensions_;
  }

  return *this;
}

particles::
~particles ()
{
}

// position
//

position::
position (const x_type& x,
          const y_type& y,
          const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

position::
position (const position& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

position::
position (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void position::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

position* position::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class position (*this, f, c);
}

position& position::
operator= (const position& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

position::
~position ()
{
}

// velocity
//

velocity::
velocity (const x_type& x,
          const y_type& y,
          const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

velocity::
velocity (const velocity& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

velocity::
velocity (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void velocity::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

velocity* velocity::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class velocity (*this, f, c);
}

velocity& velocity::
operator= (const velocity& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

velocity::
~velocity ()
{
}

// dimensions
//

dimensions::
dimensions (const x_type& x,
            const y_type& y,
            const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

dimensions::
dimensions (const dimensions& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

dimensions::
dimensions (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void dimensions::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

dimensions* dimensions::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class dimensions (*this, f, c);
}

dimensions& dimensions::
operator= (const dimensions& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

dimensions::
~dimensions ()
{
}

// center
//

center::
center (const x_type& x,
        const y_type& y,
        const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

center::
center (const center& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

center::
center (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void center::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

center* center::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class center (*this, f, c);
}

center& center::
operator= (const center& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

center::
~center ()
{
}

// particle_index
//

particle_index::
particle_index (const x_type& x,
                const y_type& y,
                const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

particle_index::
particle_index (const particle_index& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

particle_index::
particle_index (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void particle_index::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

particle_index* particle_index::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class particle_index (*this, f, c);
}

particle_index& particle_index::
operator= (const particle_index& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

particle_index::
~particle_index ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::simulation_t >
simulation (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::simulation_t > (
    ::simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation_t >
simulation (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation_t > (
    ::simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation_t >
simulation (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation_t > (
    ::simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation_t >
simulation (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation (isrc, f, p);
}

::std::unique_ptr< ::simulation_t >
simulation (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation (isrc, h, f, p);
}

::std::unique_ptr< ::simulation_t >
simulation (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation (isrc, h, f, p);
}

::std::unique_ptr< ::simulation_t >
simulation (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation (isrc, f, p);
}

::std::unique_ptr< ::simulation_t >
simulation (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation (isrc, h, f, p);
}

::std::unique_ptr< ::simulation_t >
simulation (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation (isrc, h, f, p);
}

::std::unique_ptr< ::simulation_t >
simulation (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::simulation_t > (
    ::simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation_t >
simulation (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation_t > (
    ::simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation_t >
simulation (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation_t > (
    ::simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation_t >
simulation (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::simulation_t > (
      ::simulation (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::simulation_t > r (
      ::xsd::cxx::tree::traits< ::simulation_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

::std::unique_ptr< ::simulation_t >
simulation (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::simulation_t > r (
      ::xsd::cxx::tree::traits< ::simulation_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

